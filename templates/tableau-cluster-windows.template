{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation Template for TSM-based 3-node Tableau Server cluster on Windows",
    "Parameters": {
        "AWSHostedZoneID": {
            "Description": "DNS Zone ID to contain the cluster's DNS entry (blank = no DNS)",
            "Type": "String",
            "Default": ""
        },
        "AWSPublicFQDN": {
            "Description": "Tableau Server portal will be reachable at this address (blank = no DNS)",
            "Type": "String",
            "Default": ""
        },
        "BastionSecurityGroupID": {
            "Description": "ID of the Bastion Security Group (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "KeyPairName": {
            "ConstraintDescription": "The name of an existing EC2 Key Pair",
            "Description": "Name of an existing EC2 Key Pair used to get the Administrator password for the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "Password": {
            "AllowedPattern": "^(?=[a-zA-Z0-9#@$?!]{8,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).*",
            "Description": "Tableau Services Manager (TSM) administrator password",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "PrimaryIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "ConstraintDescription": "IP address parameter must be in the form x.x.x.x",
            "Default": "10.0.2.11",
            "Description": "Fixed IP for the primary server",
            "Type": "String"
        },
        "PrimaryPublicSubnetID": {
            "Description": "The ID of the public subnet in the Primary server's Availability Zone",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrimarySubnetID": {
            "Description": "The ID of the subnet for the Primary server",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "aws-quickstart",
            "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "quickstart-tableau-server/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "RegCity": {
            "Type": "String"
        },
        "RegCompany": {
            "Type": "String"
        },
        "RegCountry": {
            "Type": "String"
        },
        "RegDepartment": {
            "Type": "String"
        },
        "RegEmail": {
            "MinLength": "1",
            "Type": "String"
        },
        "RegFirstName": {
            "MinLength": "1",
            "Type": "String"
        },
        "RegIndustry": {
            "Type": "String"
        },
        "RegLastName": {
            "MinLength": "1",
            "Type": "String"
        },
        "RegPhone": {
            "Type": "String"
        },
        "RegState": {
            "Type": "String"
        },
        "RegTitle": {
            "Type": "String"
        },
        "RegZip": {
            "Type": "String"
        },
        "SSLCertificateARN": {
            "Default": "",
            "Description": "The Amazon Resource Name for the existing SSL cert you wish to use; empty for none",
            "Type": "String"
        },
        "SourceCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "CIDR from which you may connect to web interface",
            "Type": "String"
        },
        "TableauServerAdminPassword": {
            "Description": "The password for the initial Admin user for Tableau server",
            "MinLength": "1",
            "NoEcho": "true",
            "Type": "String"
        },
        "TableauServerAdminUser": {
            "Default": "admin",
            "Description": "The name of the initial Admin user for Tableau server",
            "MinLength": "1",
            "Type": "String"
        },
        "TableauServerLicenseKey": {
            "Description": "License Key",
            "MinLength": "1",
            "Type": "String"
        },
        "Username": {
            "AllowedPattern": "[A-Za-z0-9]+",
            "Description": "Tableau Services Manager (TSM) administrator username (cannot be Administrator)",
            "MaxLength": "30",
            "Type": "String"
        },
        "VPCID": {
            "Description": "The ID of the VPC into which to deploy the cluster",
            "Type": "AWS::EC2::VPC::Id"
        },
        "Worker1IP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "ConstraintDescription": "IP address parameter must be in the form x.x.x.x",
            "Default": "10.0.4.11",
            "Description": "Fixed IP for the worker1 server",
            "Type": "String"
        },
        "Worker1PublicSubnetID": {
            "Description": "The ID of the public subnet in the Worker1 server's Availability Zone",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "Worker1SubnetID": {
            "Description": "The ID of the subnet for the Worker1 server",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "Worker2IP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "ConstraintDescription": "IP address parameter must be in the form x.x.x.x",
            "Default": "10.0.6.11",
            "Description": "Fixed IP for the worker2 server",
            "Type": "String"
        },
        "Worker2PublicSubnetID": {
            "Description": "The ID of the public subnet in the Worker2 server's Availability Zone",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "Worker2SubnetID": {
            "Description": "The ID of the subnet for the Worker2 server",
            "Type": "AWS::EC2::Subnet::Id"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "SourceCIDR",
                        "SSLCertificateARN",
                        "AWSPublicFQDN",
                        "VPCID",
                        "PrimaryPublicSubnetID",
                        "PrimarySubnetID",
                        "Worker1PublicSubnetID",
                        "Worker1SubnetID",
                        "Worker2PublicSubnetID",
                        "Worker2SubnetID"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "PrimaryIP",
                        "Worker1IP",
                        "Worker2IP"
                    ]
                },
                {
                    "Label": {
                        "default": "Configure Initial Tableau Admin User"
                    },
                    "Parameters": [
                        "TableauServerAdminUser",
                        "TableauServerAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Registration"
                    },
                    "Parameters": [
                        "TableauServerLicenseKey",
                        "RegFirstName",
                        "RegLastName",
                        "RegEmail",
                        "RegCompany",
                        "RegTitle",
                        "RegDepartment",
                        "RegIndustry",
                        "RegPhone",
                        "RegCity",
                        "RegState",
                        "RegZip",
                        "RegCountry"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "AWSPublicFQDN": {
                    "default": "Full DNS Name for Cluster"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "PrimaryIP": {
                    "default": "Primary Server IP"
                },
                "PrimaryPublicSubnetID": {
                    "default": "Primary AZ Public Subnet ID"
                },
                "PrimarySubnetID": {
                    "default": "Primary Server Subnet ID"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "RegCity": {
                    "default": "City"
                },
                "RegCompany": {
                    "default": "Company"
                },
                "RegCountry": {
                    "default": "Country"
                },
                "RegDepartment": {
                    "default": "Department"
                },
                "RegEmail": {
                    "default": "Email Address"
                },
                "RegFirstName": {
                    "default": "First Name"
                },
                "RegIndustry": {
                    "default": "Industry"
                },
                "RegLastName": {
                    "default": "Last Name"
                },
                "RegPhone": {
                    "default": "Phone"
                },
                "RegState": {
                    "default": "State"
                },
                "RegTitle": {
                    "default": "Title"
                },
                "RegZip": {
                    "default": "Zip/Postal Code"
                },
                "SSLCertificateARN": {
                    "default": "SSL Certificate ARN (Requires matching DNS name)"
                },
                "SourceCIDR": {
                    "default": "Source CIDR for Access"
                },
                "TableauServerAdminPassword": {
                    "default": "Tableau Server administrator password"
                },
                "TableauServerAdminUser": {
                    "default": "Tableau Server administrator username"
                },
                "TableauServerLicenseKey": {
                    "default": "Tableau Activation Key"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "Worker1IP": {
                    "default": "Worker1 IP"
                },
                "Worker1PublicSubnetID": {
                    "default": "Worker1 AZ Public Subnet ID"
                },
                "Worker1SubnetID": {
                    "default": "Worker1 Server Subnet ID"
                },
                "Worker2IP": {
                    "default": "Worker2 IP"
                },
                "Worker2PublicSubnetID": {
                    "default": "Worker2 AZ Public Subnet ID"
                },
                "Worker2SubnetID": {
                    "default": "Worker2 Server Subnet ID"
                }
            }
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2019.07.12"
            },
            "ap-northeast-1": {
                "WS2012R2": "ami-08c9069ebb691abd4"
            },
            "ap-northeast-2": {
                "WS2012R2": "ami-0ffe7109456576e22"
            },
            "ap-south-1": {
                "WS2012R2": "ami-03d1bbb0fb080106a"
            },
            "ap-southeast-1": {
                "WS2012R2": "ami-069532b1546ad2d5b"
            },
            "ap-southeast-2": {
                "WS2012R2": "ami-0ea835af31584b7a9"
            },
            "ca-central-1": {
                "WS2012R2": "ami-023d5d0bf968b6b8d"
            },
            "eu-central-1": {
                "WS2012R2": "ami-0e4465bd84605ed60"
            },
            "eu-north-1": {
                "WS2012R2": "ami-0198b5aed29ad83d1"
            },
            "eu-west-1": {
                "WS2012R2": "ami-0a3b775d0b1587522"
            },
            "eu-west-2": {
                "WS2012R2": "ami-085fc413f85df3839"
            },
            "eu-west-3": {
                "WS2012R2": "ami-010fe7fe27659a8a2"
            },
            "sa-east-1": {
                "WS2012R2": "ami-039a1df2bc73444c8"
            },
            "us-east-1": {
                "WS2012R2": "ami-0daee40e15682f8fa"
            },
            "us-east-2": {
                "WS2012R2": "ami-05cc7c0efc5469642"
            },
            "us-west-1": {
                "WS2012R2": "ami-05dfef67219fd3817"
            },
            "us-west-2": {
                "WS2012R2": "ami-05cf702a535de6430"
            }
        },
        "DefaultConfiguration": {
            "InstallationConfig": {
                "InstallationBucket": "tableau-quickstart",
                "InstallationExecutable": "TableauServer-64bit.exe"
            },
            "MachineConfiguration": {
                "BastionInstanceType": "t2.micro",
                "InstanceType": "m4.4xlarge",
                "VolumeSize": 100,
                "WindowsVersion": "WS2012R2"
            },
            "NetworkConfiguration": {
                "PrimaryIP": "10.0.2.11",
                "PrivateSubnet1CIDR": "10.0.2.0/24",
                "PrivateSubnet2CIDR": "10.0.4.0/24",
                "PrivateSubnet3CIDR": "10.0.6.0/24",
                "PublicSubnet1CIDR": "10.0.1.0/24",
                "PublicSubnet2CIDR": "10.0.3.0/24",
                "PublicSubnet3CIDR": "10.0.5.0/24",
                "VPCCIDR": "10.0.0.0/16",
                "Worker1IP": "10.0.4.11",
                "Worker2IP": "10.0.6.11"
            }
        }
    },
    "Conditions": {
        "HasSSLCertificate": {
            "Fn::Not": [
                {
                    "Condition": "NoSSLCertficate"
                }
            ]
        },
        "IsTrial": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "TableauServerLicenseKey"
                }
            ]
        },
        "NoDNSEntry": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "AWSPublicFQDN"
                }
            ]
        },
        "NoSSLCertficate": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "SSLCertificateARN"
                }
            ]
        },
        "SiteDomainRoute53Condition": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWSPublicFQDN"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWSHostedZoneID"
                                },
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "Resources": {
        "InitialHost": {
            "DependsOn": [
                "InternalSecurityGroup"
            ],
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessRole": {
                        "buckets": [
                            {
                                "Fn::FindInMap": [
                                    "DefaultConfiguration",
                                    "InstallationConfig",
                                    "InstallationBucket"
                                ]
                            }
                        ],
                        "roleName": {
                            "Ref": "S3ReadOnlyRole"
                        },
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-disable-firewall": {
                                "command": "netsh advfirewall set allprofiles state off",
                                "cwd": "c:\\Windows\\System32",
                                "waitAfterCompletion": "0"
                            },
                            "2-install-python": {
                                "command": "c:\\tabsetup\\python-3.6.4-amd64.exe /quiet InstallAllUsers=1 PrependPath=1",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "3-create-user": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "net",
                                            "user",
                                            {
                                                "Fn::Sub": "${Username}"
                                            },
                                            {
                                                "Fn::Sub": "${Password}"
                                            },
                                            "/add",
                                            "/y"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "4-add-admin": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "net",
                                            "localgroup",
                                            "Administrators",
                                            {
                                                "Fn::Sub": "${Username}"
                                            },
                                            "/add",
                                            "/y"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "5-run-installer": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "\"C:\\Program Files\\Python36\\python.exe\"",
                                            "SilentInstaller.py",
                                            "install",
                                            "--secretsFile c:\\tabsetup\\secrets.json",
                                            "--registrationFile c:\\tabsetup\\registration.json",
                                            "--configFile c:\\tabsetup\\config.json",
                                            "--installDir c:\\tableau",
                                            "--nodeConfigurationDirectory c:\\tabsetup\\nodeConfiguration.json",
                                            "c:\\tabsetup\\tableau-server-webapp-installer.exe",
                                            " > c:\\tabsetup\\tsm_installer-output.txt 2>&1"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "6-save-hostname": {
                                "command": "hostname > c:\\tabsetup\\hostname",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "7-cleanup-secrets": {
                                "command": "del c:\\tabsetup\\secrets.json",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\tabsetup\\DeployTopology.cmd": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "c: ",
                                            "cd c:\\tableau\\packages\\bin.* ",
                                            ":CheckForNodes ",
                                            "call tsm.cmd login -u %1 -p %2 ",
                                            "FOR /F \"tokens=*\" %%F IN ('tsm.cmd topology list-nodes ^| find /i \"node\" /c') do ( ",
                                            "      SET Var=%%F   ",
                                            ") ",
                                            "ECHO Found %Var% nodes... ",
                                            "IF /I %Var% GEQ 3 GOTO FoundIt ",
                                            "call TIMEOUT /T 60 >nul ",
                                            "GOTO CheckForNodes ",
                                            ":FoundIt ",
                                            "call tsm.cmd login -u %1 -p %2 ",
                                            "call tsm.cmd topology set-process -n node2 -pr clustercontroller -c 1 ",
                                            "call tsm.cmd topology set-process -n node2 -pr gateway -c 1 ",
                                            "call tsm.cmd topology set-process -n node2 -pr vizportal -c 2 ",
                                            "call tsm.cmd topology set-process -n node2 -pr vizqlserver -c 2 ",
                                            "call tsm.cmd topology set-process -n node2 -pr cacheserver -c 2 ",
                                            "call tsm.cmd topology set-process -n node2 -pr searchserver -c 1 ",
                                            "call tsm.cmd topology set-process -n node2 -pr backgrounder -c 1 ",
                                            "call tsm.cmd topology set-process -n node2 -pr dataserver -c 1 ",
                                            "call tsm.cmd topology set-process -n node2 -pr filestore -c 1 ",
                                            "call tsm.cmd topology set-process -n node3 -pr clustercontroller -c 1 ",
                                            "call tsm.cmd topology set-process -n node3 -pr gateway -c 1 ",
                                            "call tsm.cmd topology set-process -n node3 -pr vizportal -c 2 ",
                                            "call tsm.cmd topology set-process -n node3 -pr vizqlserver -c 2 ",
                                            "call tsm.cmd topology set-process -n node3 -pr cacheserver -c 2 ",
                                            "call tsm.cmd topology set-process -n node3 -pr searchserver -c 1 ",
                                            "call tsm.cmd topology set-process -n node3 -pr backgrounder -c 1 ",
                                            "call tsm.cmd topology set-process -n node3 -pr dataserver -c 1 ",
                                            "call tsm.cmd topology set-process -n node3 -pr filestore -c 1 ",
                                            "call tsm.cmd topology set-process -n node2 -pr pgsql -c 1 ",
                                            "call tsm.cmd pending-changes apply --ignore-warnings --ignore-prompt",
                                            "call tsm.cmd stop ",
                                            "call tsm.cmd topology deploy-coordination-service -n node1,node2,node3 ",
                                            "call TIMEOUT /T 180 ",
                                            "call tsm.cmd topology cleanup-coordination-service -u %1 -p %2 ",
                                            "call TIMEOUT /T 120 ",
                                            "call tsm.cmd start -u %1 -p %2 ",
                                            "ECHO Completed topology deployment "
                                        ]
                                    ]
                                }
                            },
                            "c:\\tabsetup\\SilentInstaller.py": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/SilentInstaller.py"
                                        ]
                                    ]
                                }
                            },
                            "c:\\tabsetup\\config.json": {
                                "content": {
                                    "configEntities": {
                                        "identityStore": {
                                            "_type": "identityStoreType",
                                            "type": "local"
                                        }
                                    },
                                    "topologyVersion": {}
                                }
                            },
                            "c:\\tabsetup\\python-3.6.4-amd64.exe": {
                                "source": "https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe"
                            },
                            "c:\\tabsetup\\registration.json": {
                                "content": {
                                    "city": {
                                        "Ref": "RegCity"
                                    },
                                    "company": {
                                        "Fn::Join": [
                                            ";",
                                            [
                                                {
                                                    "Ref": "RegCompany"
                                                },
                                                "AWSQuickStart-WinBeta"
                                            ]
                                        ]
                                    },
                                    "country": {
                                        "Ref": "RegCountry"
                                    },
                                    "department": {
                                        "Ref": "RegDepartment"
                                    },
                                    "email": {
                                        "Ref": "RegEmail"
                                    },
                                    "first_name": {
                                        "Ref": "RegFirstName"
                                    },
                                    "industry": {
                                        "Ref": "RegIndustry"
                                    },
                                    "last_name": {
                                        "Ref": "RegLastName"
                                    },
                                    "phone": {
                                        "Ref": "RegPhone"
                                    },
                                    "state": {
                                        "Ref": "RegState"
                                    },
                                    "title": {
                                        "Ref": "RegTitle"
                                    },
                                    "zip": {
                                        "Ref": "RegZip"
                                    }
                                }
                            },
                            "c:\\tabsetup\\secrets.json": {
                                "content": {
                                    "content_admin_pass": {
                                        "Ref": "TableauServerAdminPassword"
                                    },
                                    "content_admin_user": {
                                        "Ref": "TableauServerAdminUser"
                                    },
                                    "local_admin_pass": {
                                        "Ref": "Password"
                                    },
                                    "local_admin_user": {
                                        "Ref": "Username"
                                    },
                                    "product_keys": [
                                        {
                                            "Fn::If": [
                                                "IsTrial",
                                                "trial",
                                                {
                                                    "Fn::Sub": "${TableauServerLicenseKey}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            "c:\\tabsetup\\tableau-server-webapp-installer.exe": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationExecutable"
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "TableauWindowsServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "DefaultConfiguration",
                                "MachineConfiguration",
                                "WindowsVersion"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "DefaultConfiguration",
                        "MachineConfiguration",
                        "InstanceType"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "PrivateIpAddress": {
                    "Ref": "PrimaryIP"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PrimarySubnetID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-node1"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "<script>",
                                {
                                    "Fn::Sub": "cfn-init.exe -v -s ${AWS::StackId} -r InitialHost --region ${AWS::Region}"
                                },
                                {
                                    "Fn::Sub": [
                                        "cfn-signal.exe -e %errorlevel% ${WHUrl}",
                                        {
                                            "WHUrl": {
                                                "Fn::Base64": {
                                                    "Ref": "TableauInitialWaitHandle"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": "C:\\tabsetup\\DeployTopology.cmd ${Username} ${Password} > c:\\tabsetup\\tsm_topology-output.txt 2>&1"
                                },
                                "del c:\\tabsetup\\*.json",
                                "del c:\\tabsetup\\*.cmd",
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "InternalSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable RDP and Web traffic from the bastion to private hosts, and all traffic between private hosts",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "3389",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        },
                        "ToPort": "3389"
                    },
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        },
                        "ToPort": "80"
                    },
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "ToPort": "80"
                    },
                    {
                        "FromPort": "8850",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        },
                        "ToPort": "8850"
                    },
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "DefaultConfiguration",
                                "NetworkConfiguration",
                                "VPCCIDR"
                            ]
                        },
                        "IpProtocol": "-1"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "InternalSecurityGroup"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable Web traffic",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "SourceCIDR"
                        },
                        "FromPort": {
                            "Fn::If": [
                                "HasSSLCertificate",
                                443,
                                80
                            ]
                        },
                        "ToPort": {
                            "Fn::If": [
                                "HasSSLCertificate",
                                443,
                                80
                            ]
                        },
                        "IpProtocol": "tcp"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "LoadBalancerSecurityGroup"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "Node2": {
            "DependsOn": [
                "InternalSecurityGroup",
                "TableauInitialWaitCondition"
            ],
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessRole": {
                        "buckets": [
                            {
                                "Fn::FindInMap": [
                                    "DefaultConfiguration",
                                    "InstallationConfig",
                                    "InstallationBucket"
                                ]
                            }
                        ],
                        "roleName": {
                            "Ref": "S3ReadOnlyRole"
                        },
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-disable-firewall": {
                                "command": "netsh advfirewall set allprofiles state off",
                                "cwd": "c:\\Windows\\System32",
                                "waitAfterCompletion": "0"
                            },
                            "2-install-python": {
                                "command": "c:\\tabsetup\\python-3.6.4-amd64.exe /quiet InstallAllUsers=1 PrependPath=1",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "3-create-user": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "net",
                                            "user",
                                            {
                                                "Fn::Sub": "${Username}"
                                            },
                                            {
                                                "Fn::Sub": "${Password}"
                                            },
                                            "/add",
                                            "/y"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "4-add-admin": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "net",
                                            "localgroup",
                                            "Administrators",
                                            {
                                                "Fn::Sub": "${Username}"
                                            },
                                            "/add",
                                            "/y"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "5-get-share": {
                                "command": {
                                    "Fn::Sub": "net use M: \\\\${PrimaryIP}\\c$\\tabsetup ${Password} /user:${PrimaryIP}\\${Username}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "6-save-hostname": {
                                "command": "hostname > c:\\tabsetup\\hostname",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "7-add-hostname": {
                                "command": {
                                    "Fn::Sub": "c:\\tabsetup\\AddHostname.cmd ${PrimaryIP}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "8-run-installer": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"C:\\Program Files\\Python36\\python.exe\" ",
                                            "SilentInstaller.py ",
                                            "installWorker ",
                                            "--secretsFile c:\\tabsetup\\secrets.json ",
                                            "--nodeConfigurationFile \\\\",
                                            {
                                                "Ref": "PrimaryIP"
                                            },
                                            "\\c$\\tabsetup\\nodeConfiguration.json ",
                                            "--installDir c:\\tableau ",
                                            "c:\\tabsetup\\tableau-server-webapp-installer.exe ",
                                            " > c:\\tabsetup\\tsm_installer-output.txt 2>&1"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "9-cleanup-secrets": {
                                "command": "del c:\\tabsetup\\secrets.json",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\tabsetup\\AddHostname.cmd": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/AddHostname.cmd"
                                        ]
                                    ]
                                }
                            },
                            "c:\\tabsetup\\SilentInstaller.py": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/SilentInstaller.py"
                                        ]
                                    ]
                                }
                            },
                            "c:\\tabsetup\\config.json": {
                                "content": {
                                    "configEntities": {
                                        "identityStore": {
                                            "_type": "identityStoreType",
                                            "type": "local"
                                        }
                                    },
                                    "topologyVersion": {}
                                }
                            },
                            "c:\\tabsetup\\python-3.6.4-amd64.exe": {
                                "source": "https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe"
                            },
                            "c:\\tabsetup\\secrets.json": {
                                "content": {
                                    "content_admin_pass": {
                                        "Ref": "TableauServerAdminPassword"
                                    },
                                    "content_admin_user": {
                                        "Ref": "TableauServerAdminUser"
                                    },
                                    "local_admin_pass": {
                                        "Ref": "Password"
                                    },
                                    "local_admin_user": {
                                        "Ref": "Username"
                                    },
                                    "product_keys": [
                                        {
                                            "Fn::If": [
                                                "IsTrial",
                                                "trial",
                                                {
                                                    "Fn::Sub": "${TableauServerLicenseKey}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            "c:\\tabsetup\\tableau-server-webapp-installer.exe": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationExecutable"
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "TableauWindowsServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "DefaultConfiguration",
                                "MachineConfiguration",
                                "WindowsVersion"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "DefaultConfiguration",
                        "MachineConfiguration",
                        "InstanceType"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "PrivateIpAddress": {
                    "Ref": "Worker1IP"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Worker1SubnetID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-node2"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "<script>",
                                {
                                    "Fn::Sub": "cfn-init.exe -v -s ${AWS::StackId} -r Node2 --region ${AWS::Region}"
                                },
                                {
                                    "Fn::Sub": [
                                        "cfn-signal.exe -e %errorlevel% ${WHUrl}",
                                        {
                                            "WHUrl": {
                                                "Fn::Base64": {
                                                    "Ref": "TableauWorkerWaitHandle"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": "del c:\\tabsetup\\*.cmd"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Node3": {
            "DependsOn": [
                "InternalSecurityGroup",
                "TableauInitialWaitCondition"
            ],
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessRole": {
                        "buckets": [
                            {
                                "Fn::FindInMap": [
                                    "DefaultConfiguration",
                                    "InstallationConfig",
                                    "InstallationBucket"
                                ]
                            }
                        ],
                        "roleName": {
                            "Ref": "S3ReadOnlyRole"
                        },
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-disable-firewall": {
                                "command": "netsh advfirewall set allprofiles state off",
                                "cwd": "c:\\Windows\\System32",
                                "waitAfterCompletion": "0"
                            },
                            "2-install-python": {
                                "command": "c:\\tabsetup\\python-3.6.4-amd64.exe /quiet InstallAllUsers=1 PrependPath=1",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "3-create-user": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "net",
                                            "user",
                                            {
                                                "Fn::Sub": "${Username}"
                                            },
                                            {
                                                "Fn::Sub": "${Password}"
                                            },
                                            "/add",
                                            "/y"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "4-add-admin": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "net",
                                            "localgroup",
                                            "Administrators",
                                            {
                                                "Fn::Sub": "${Username}"
                                            },
                                            "/add",
                                            "/y"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "5.0-get-share": {
                                "command": {
                                    "Fn::Sub": "net use M: \\\\${PrimaryIP}\\c$\\tabsetup ${Password} /user:${PrimaryIP}\\${Username}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "5.1-save-hostname": {
                                "command": "hostname > c:\\tabsetup\\hostname",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "5.2-add-hostname": {
                                "command": {
                                    "Fn::Sub": "c:\\tabsetup\\AddHostname.cmd ${PrimaryIP}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "6-run-installer": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"C:\\Program Files\\Python36\\python.exe\" ",
                                            "SilentInstaller.py ",
                                            "installWorker ",
                                            "--secretsFile c:\\tabsetup\\secrets.json ",
                                            "--nodeConfigurationFile \\\\",
                                            {
                                                "Ref": "PrimaryIP"
                                            },
                                            "\\c$\\tabsetup\\nodeConfiguration.json ",
                                            "--installDir c:\\tableau ",
                                            "c:\\tabsetup\\tableau-server-webapp-installer.exe ",
                                            " > c:\\tabsetup\\tsm_installer-output.txt 2>&1"
                                        ]
                                    ]
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "7.0-get-share2": {
                                "command": {
                                    "Fn::Sub": "net use N: \\\\${Worker1IP}\\c$ ${Password} /user:${Worker1IP}\\${Username}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "7.1-add-hostname2": {
                                "command": {
                                    "Fn::Sub": "c:\\tabsetup\\AddHostname.cmd ${Worker1IP}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "7.2-get-share3": {
                                "command": {
                                    "Fn::Sub": "net use O: \\\\${Worker2IP}\\c$ ${Password} /user:${Worker2IP}\\${Username}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "7.3-add-hostname3": {
                                "command": {
                                    "Fn::Sub": "c:\\tabsetup\\AddHostname.cmd ${Worker2IP}"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "8.0-cleanup-secrets": {
                                "command": "del c:\\tabsetup\\secrets.json",
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "8.1-copy-hostfile-first": {
                                "command": {
                                    "Fn::Sub": "copy /Y %windir%\\System32\\drivers\\etc\\hosts \\\\${PrimaryIP}\\C$\\Windows\\System32\\drivers\\etc\\hosts"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            },
                            "8.2-copy-hostfile-second": {
                                "command": {
                                    "Fn::Sub": "copy /Y %windir%\\System32\\drivers\\etc\\hosts \\\\${Worker1IP}\\C$\\Windows\\System32\\drivers\\etc\\hosts"
                                },
                                "cwd": "c:\\tabsetup",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\tabsetup\\AddHostname.cmd": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/AddHostname.cmd"
                                        ]
                                    ]
                                }
                            },
                            "c:\\tabsetup\\SilentInstaller.py": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/SilentInstaller.py"
                                        ]
                                    ]
                                }
                            },
                            "c:\\tabsetup\\config.json": {
                                "content": {
                                    "configEntities": {
                                        "identityStore": {
                                            "_type": "identityStoreType",
                                            "type": "local"
                                        }
                                    },
                                    "topologyVersion": {}
                                }
                            },
                            "c:\\tabsetup\\python-3.6.4-amd64.exe": {
                                "source": "https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe"
                            },
                            "c:\\tabsetup\\secrets.json": {
                                "content": {
                                    "content_admin_pass": {
                                        "Ref": "TableauServerAdminPassword"
                                    },
                                    "content_admin_user": {
                                        "Ref": "TableauServerAdminUser"
                                    },
                                    "local_admin_pass": {
                                        "Ref": "Password"
                                    },
                                    "local_admin_user": {
                                        "Ref": "Username"
                                    },
                                    "product_keys": [
                                        {
                                            "Fn::If": [
                                                "IsTrial",
                                                "trial",
                                                {
                                                    "Fn::Sub": "${TableauServerLicenseKey}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            "c:\\tabsetup\\tableau-server-webapp-installer.exe": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationBucket"
                                                ]
                                            },
                                            ".s3.amazonaws.com/",
                                            {
                                                "Fn::FindInMap": [
                                                    "DefaultConfiguration",
                                                    "InstallationConfig",
                                                    "InstallationExecutable"
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "TableauWindowsServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "DefaultConfiguration",
                                "MachineConfiguration",
                                "WindowsVersion"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "DefaultConfiguration",
                        "MachineConfiguration",
                        "InstanceType"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "PrivateIpAddress": {
                    "Ref": "Worker2IP"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Worker2SubnetID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-node3"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "<script>",
                                {
                                    "Fn::Sub": "cfn-init.exe -v -s ${AWS::StackId} -r Node3 --region ${AWS::Region}"
                                },
                                {
                                    "Fn::Sub": [
                                        "cfn-signal.exe -e %errorlevel% ${WHUrl}",
                                        {
                                            "WHUrl": {
                                                "Fn::Base64": {
                                                    "Ref": "TableauWorkerWaitHandle"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": "del c:\\tabsetup\\*.cmd"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "S3ReadOnlyRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Fn::FindInMap": [
                                                        "DefaultConfiguration",
                                                        "InstallationConfig",
                                                        "InstallationBucket"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Fn::FindInMap": [
                                                        "DefaultConfiguration",
                                                        "InstallationConfig",
                                                        "InstallationBucket"
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "s3readonlyaccess"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PrimaryPublicSubnetID"
                    },
                    {
                        "Ref": "Worker1PublicSubnetID"
                    },
                    {
                        "Ref": "Worker2PublicSubnetID"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": {
                    "Fn::If": [
                        "HasSSLCertificate",
                        443,
                        80
                    ]
                },
                "Protocol": {
                    "Fn::If": [
                        "HasSSLCertificate",
                        "HTTPS",
                        "HTTP"
                    ]
                },
                "Certificates": [
                    {
                        "Fn::If": [
                            "HasSSLCertificate",
                            {
                                "CertificateArn": {
                                    "Ref": "SSLCertificateARN"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Ref": "VPCID"
                },
                "TargetType": "instance",
                "Targets": [
                    {
                        "Id": {
                            "Ref": "InitialHost"
                        }
                    },
                    {
                        "Id": {
                            "Ref": "Node2"
                        }
                    },
                    {
                        "Id": {
                            "Ref": "Node3"
                        }
                    }
                ],
                "TargetGroupAttributes": [
                    {
                        "Key": "stickiness.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "stickiness.type",
                        "Value": "lb_cookie"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": "30"
                    }
                ]
            }
        },
        "TableauSiteDomainRoute53Record": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "SiteDomainRoute53Condition",
            "Properties": {
                "Name": {
                    "Ref": "AWSPublicFQDN"
                },
                "Type": "A",
                "HostedZoneId": {
                    "Ref": "AWSHostedZoneID"
                },
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "ApplicationLoadBalancer",
                            "DNSName"
                        ]
                    },
                    "EvaluateTargetHealth": "True",
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "ApplicationLoadBalancer",
                            "CanonicalHostedZoneID"
                        ]
                    }
                }
            }
        },
        "TableauInitialWaitCondition": {
            "Properties": {
                "Count": "1",
                "Handle": {
                    "Ref": "TableauInitialWaitHandle"
                },
                "Timeout": "5400"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "TableauInitialWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "TableauWindowsServerInstanceProfile": {
            "DependsOn": [
                "S3ReadOnlyRole"
            ],
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "S3ReadOnlyRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "TableauWorkerWaitCondition": {
            "Properties": {
                "Count": "2",
                "Handle": {
                    "Ref": "TableauWorkerWaitHandle"
                },
                "Timeout": "9000"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "TableauWorkerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }
    },
    "Outputs": {
        "LoadBalancerDNSName": {
            "Description": "Direct DNS name of load balancer",
            "Value": {
                "Fn::GetAtt": [
                    "ApplicationLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "LoadBalancerID": {
            "Description": "Load Balancer ID",
            "Value": {
                "Ref": "ApplicationLoadBalancer"
            }
        },
        "PrimaryInstanceID": {
            "Description": "Instance ID of Primary Server",
            "Value": {
                "Ref": "InitialHost"
            }
        },
        "PrimarySubnetID": {
            "Description": "Subnet ID of Primary Server",
            "Value": {
                "Ref": "PrimarySubnetID"
            }
        },
        "SecurityGroup": {
            "Description": "The security group the instances belong to",
            "Value": {
                "Ref": "InternalSecurityGroup"
            }
        },
        "Worker1InstanceID": {
            "Description": "Instance ID of Worker1 Server",
            "Value": {
                "Ref": "Node2"
            }
        },
        "Worker1SubnetID": {
            "Description": "Subnet ID of Primary Server",
            "Value": {
                "Ref": "Worker1SubnetID"
            }
        },
        "Worker2InstanceID": {
            "Description": "Instance ID of Worker2 Server",
            "Value": {
                "Ref": "Node3"
            }
        },
        "Worker2SubnetID": {
            "Description": "Subnet ID of Primary Server",
            "Value": {
                "Ref": "Worker2SubnetID"
            }
        }
    }
}